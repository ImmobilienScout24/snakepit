# do not create debug-packages
%define debug_package %{nil}

# deactivcate python bytecompiling
%global __os_install_post %(echo '%{__os_install_post}' | sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g')

Name:          {{ pypi_package_name }}
Version:       {{ pypi_package_version }}
Release:       {{ build }}
Summary:       {{ pypi_package_summary }} (EXPERIMENTAL SNAKEPIT STANDALONE)
Group:         Development/Tools
License:       {{ pypi_package_licence }}
BuildRoot:     %{_tmppath}/%{name}-%{version}-root
BuildRequires: /bin/bash curl
AutoReqProv:   no

%description
{{ pypi_package_name }} via PyRun generated by snakepit (EXPERIMENTAL)

%build
echo MY_USER=$USER
# clean, just in case
rm -rf {{ pypi_package_name }}
{% block libraries %}{% endblock %}
curl -O https://downloads.egenix.com/python/install-pyrun
bash install-pyrun {{ pypi_package_name }}
# use pip to install {{ pypi_package_name }}
{{ pypi_package_name }}/bin/pip install {{ extra_pip_args }} --no-compile --global-option build_scripts --global-option "--executable=/opt/{{ pypi_package_name }}/bin/python" {{ pypi_package_name }}=={{ pypi_package_version }}
#cleanup
{{ pypi_package_name }}/bin/python -m pip uninstall pip setuptools -y

%install
# create /opt/{{ pypi_package_name }} in buildroot
install -m 755 -d %{buildroot}/opt/{{ pypi_package_name }}
# copy the built PyRun env into the buildroot
cp -a {{ pypi_package_name }} %{buildroot}/opt
# create a /usr/bin
install -m 755 -d %{buildroot}/usr/bin
# do all the symlinks
{% for item in symlinks %}
ln -s /opt/{{ pypi_package_name }}/bin/{{ item }} %{buildroot}/usr/bin
{% endfor %}

%clean
# remove the result of the build step
rm -rf %{buildroot}

%files
%defattr(-,root,root,-)
/opt/{{ pypi_package_name }}
{% for item in symlinks %}
/usr/bin/{{ item }}
{% endfor %}

%post
